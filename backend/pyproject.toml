[project]
name = "agentic-stack"
version = "0.1.0"
description = "A multi-agent orchestration system with A2A protocol support for code generation, research, and analytics"
authors = [
    { name = "Adam", email = "" }
]
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["ai", "agents", "orchestration", "fastapi", "a2a", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: FastAPI",
    "Framework :: AsyncIO",
]

dependencies = [
    # Core Framework
    "pydantic-ai[all]>=0.4.11",
    "fasta2a>=0.2.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "starlette>=0.37.0",
    
    # AI Model Providers
    "openai>=1.35.0",
    "anthropic>=0.25.0",
    
    # MCP Support
    "mcp>=0.1.0",
    "httpx>=0.27.0",
    
    # Storage & Caching
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    
    # State Management
    "pydantic>=2.7.0",
    "pydantic-settings>=2.3.0",
    
    # Monitoring & Observability
    "opentelemetry-api>=1.24.0",
    "opentelemetry-sdk>=1.24.0",
    "opentelemetry-instrumentation-fastapi>=0.45b0",
    "opentelemetry-instrumentation-httpx>=0.45b0",
    "opentelemetry-instrumentation-redis>=0.45b0",
    "opentelemetry-exporter-otlp>=1.24.0",
    "logfire>=0.30.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "python-multipart>=0.0.9",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.0",
    "faker>=25.0.0",
    
    # Code Quality
    "ruff>=0.7.0",
    "mypy>=1.11.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.2.0",
    
    # Type Stubs
    "types-redis>=4.6.0",
    "types-pyyaml>=6.0.0",
    "types-aiofiles>=23.2.0",
    
    # Development Tools
    "ipython>=8.25.0",
    "ipdb>=0.13.0",
    "rich>=13.7.0",
    "pre-commit>=3.7.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.25.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

[project.urls]
Homepage = "https://github.com/adam/agentic-stack"
Documentation = "https://github.com/adam/agentic-stack/docs"
Repository = "https://github.com/adam/agentic-stack.git"
Issues = "https://github.com/adam/agentic-stack/issues"

[project.scripts]
agentic-stack = "src.main:main"
agentic-server = "src.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.2.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.7.0",
    "mypy>=1.11.0",
]

[tool.uv.pip]
index-url = "https://pypi.org/simple"
extra-index-url = []
find-links = []

[tool.ruff]
# Ruff configuration for production backend
target-version = "py311"
line-length = 88
indent-width = 4

# Include/exclude patterns
include = ["*.py", "*.pyi", "**/pyproject.toml"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".env",
    "dist",
    "build",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "node_modules",
    "migrations",
    "alembic",
]

[tool.ruff.lint]
# Enable rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "ERA",    # flake8-eradicate
    "PL",     # pylint
    "RUF",    # ruff-specific rules
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "ANN",    # flake8-annotations
    "D",      # pydocstyle
]

# Ignore specific rules
ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D106",   # Missing docstring in public nested class
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "D401",   # First line should be in imperative mood
    "D406",   # Section name should end with a newline
    "D407",   # Missing dashed underline after section
    "D408",   # Section underline should be in the line following the section's name
    "D409",   # Section underline should match the length of its name
    "D413",   # Missing blank line after last section
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "S101",   # Use of assert detected (needed for tests)
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "B008",   # Do not perform function calls in argument defaults
    "RET504", # Unnecessary assignment before return
    "SIM108", # Use ternary operator
    "T201",   # Print found (ok for debugging)
    "T203",   # pprint found (ok for debugging)
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Allow assert in tests
    "ANN",    # Don't require type annotations in tests
    "D",      # Don't require docstrings in tests
    "PLR2004", # Allow magic values in tests
    "S106",   # Allow hardcoded passwords in tests
]
"migrations/**/*.py" = ["ALL"]
"mcp_servers/**/*.py" = ["D", "ANN"]
"**/run_*.py" = ["T20"]  # Allow print statements in run scripts

[tool.ruff.lint.isort]
known-first-party = ["src"]
combine-as-imports = true
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 72

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
show_traceback = true
color_output = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "opentelemetry.*",
    "logfire.*",
    "mcp.*",
    "fasta2a.*",
    "pydantic_ai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
pythonpath = ["."]
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
    "-vv",
    "--tb=short",
    "--maxfail=5",
    "--timeout=300",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "mcp: marks tests as MCP-related tests",
    "a2a: marks tests as A2A protocol tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/dist/*",
    "*/build/*",
    "*.egg-info/*",
    "*/node_modules/*",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "class .*\\bProtocol\\):",
    "pass",
]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "venv", ".venv", "node_modules"]
skips = ["B101", "B601", "B602"]  # Skip assert_used, shell with subprocess, shell=True

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["src"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_glob = ["*/migrations/*", "*/.venv/*", "*/venv/*"]